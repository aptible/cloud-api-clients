/*
Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud_api_client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type WorkerApi interface {

	/*
	UpdateOperationApiV1OperationsOperationIdPut Update Operation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param operationId
	@return ApiUpdateOperationApiV1OperationsOperationIdPutRequest
	*/
	UpdateOperationApiV1OperationsOperationIdPut(ctx context.Context, operationId string) ApiUpdateOperationApiV1OperationsOperationIdPutRequest

	// UpdateOperationApiV1OperationsOperationIdPutExecute executes the request
	//  @return interface{}
	UpdateOperationApiV1OperationsOperationIdPutExecute(r ApiUpdateOperationApiV1OperationsOperationIdPutRequest) (interface{}, *http.Response, error)

	/*
	WorkerHealthCheckApiV1WorkerHealthCheckPost Worker Health Check

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiWorkerHealthCheckApiV1WorkerHealthCheckPostRequest
	*/
	WorkerHealthCheckApiV1WorkerHealthCheckPost(ctx context.Context) ApiWorkerHealthCheckApiV1WorkerHealthCheckPostRequest

	// WorkerHealthCheckApiV1WorkerHealthCheckPostExecute executes the request
	//  @return interface{}
	WorkerHealthCheckApiV1WorkerHealthCheckPostExecute(r ApiWorkerHealthCheckApiV1WorkerHealthCheckPostRequest) (interface{}, *http.Response, error)
}

// WorkerApiService WorkerApi service
type WorkerApiService service

type ApiUpdateOperationApiV1OperationsOperationIdPutRequest struct {
	ctx context.Context
	ApiService WorkerApi
	operationId string
	operationUpdate *OperationUpdate
}

func (r ApiUpdateOperationApiV1OperationsOperationIdPutRequest) OperationUpdate(operationUpdate OperationUpdate) ApiUpdateOperationApiV1OperationsOperationIdPutRequest {
	r.operationUpdate = &operationUpdate
	return r
}

func (r ApiUpdateOperationApiV1OperationsOperationIdPutRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.UpdateOperationApiV1OperationsOperationIdPutExecute(r)
}

/*
UpdateOperationApiV1OperationsOperationIdPut Update Operation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param operationId
 @return ApiUpdateOperationApiV1OperationsOperationIdPutRequest
*/
func (a *WorkerApiService) UpdateOperationApiV1OperationsOperationIdPut(ctx context.Context, operationId string) ApiUpdateOperationApiV1OperationsOperationIdPutRequest {
	return ApiUpdateOperationApiV1OperationsOperationIdPutRequest{
		ApiService: a,
		ctx: ctx,
		operationId: operationId,
	}
}

// Execute executes the request
//  @return interface{}
func (a *WorkerApiService) UpdateOperationApiV1OperationsOperationIdPutExecute(r ApiUpdateOperationApiV1OperationsOperationIdPutRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkerApiService.UpdateOperationApiV1OperationsOperationIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/operations/{operation_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"operation_id"+"}", url.PathEscape(parameterToString(r.operationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.operationUpdate == nil {
		return localVarReturnValue, nil, reportError("operationUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.operationUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkerHealthCheckApiV1WorkerHealthCheckPostRequest struct {
	ctx context.Context
	ApiService WorkerApi
	healthCheckFromWorker *HealthCheckFromWorker
}

func (r ApiWorkerHealthCheckApiV1WorkerHealthCheckPostRequest) HealthCheckFromWorker(healthCheckFromWorker HealthCheckFromWorker) ApiWorkerHealthCheckApiV1WorkerHealthCheckPostRequest {
	r.healthCheckFromWorker = &healthCheckFromWorker
	return r
}

func (r ApiWorkerHealthCheckApiV1WorkerHealthCheckPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.WorkerHealthCheckApiV1WorkerHealthCheckPostExecute(r)
}

/*
WorkerHealthCheckApiV1WorkerHealthCheckPost Worker Health Check

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWorkerHealthCheckApiV1WorkerHealthCheckPostRequest
*/
func (a *WorkerApiService) WorkerHealthCheckApiV1WorkerHealthCheckPost(ctx context.Context) ApiWorkerHealthCheckApiV1WorkerHealthCheckPostRequest {
	return ApiWorkerHealthCheckApiV1WorkerHealthCheckPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *WorkerApiService) WorkerHealthCheckApiV1WorkerHealthCheckPostExecute(r ApiWorkerHealthCheckApiV1WorkerHealthCheckPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkerApiService.WorkerHealthCheckApiV1WorkerHealthCheckPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/worker/health-check"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.healthCheckFromWorker == nil {
		return localVarReturnValue, nil, reportError("healthCheckFromWorker is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.healthCheckFromWorker
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
