/*
Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud_api_client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type WorkerApi interface {

	/*
	UpdateOperationApiV1OperationsOperationIdOperationStatusPut Update Operation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param operationId
	@param operationStatus
	@return ApiUpdateOperationApiV1OperationsOperationIdOperationStatusPutRequest
	*/
	UpdateOperationApiV1OperationsOperationIdOperationStatusPut(ctx context.Context, operationId string, operationStatus OperationStatus) ApiUpdateOperationApiV1OperationsOperationIdOperationStatusPutRequest

	// UpdateOperationApiV1OperationsOperationIdOperationStatusPutExecute executes the request
	//  @return interface{}
	UpdateOperationApiV1OperationsOperationIdOperationStatusPutExecute(r ApiUpdateOperationApiV1OperationsOperationIdOperationStatusPutRequest) (interface{}, *http.Response, error)
}

// WorkerApiService WorkerApi service
type WorkerApiService service

type ApiUpdateOperationApiV1OperationsOperationIdOperationStatusPutRequest struct {
	ctx context.Context
	ApiService WorkerApi
	operationId string
	operationStatus OperationStatus
}

func (r ApiUpdateOperationApiV1OperationsOperationIdOperationStatusPutRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.UpdateOperationApiV1OperationsOperationIdOperationStatusPutExecute(r)
}

/*
UpdateOperationApiV1OperationsOperationIdOperationStatusPut Update Operation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param operationId
 @param operationStatus
 @return ApiUpdateOperationApiV1OperationsOperationIdOperationStatusPutRequest
*/
func (a *WorkerApiService) UpdateOperationApiV1OperationsOperationIdOperationStatusPut(ctx context.Context, operationId string, operationStatus OperationStatus) ApiUpdateOperationApiV1OperationsOperationIdOperationStatusPutRequest {
	return ApiUpdateOperationApiV1OperationsOperationIdOperationStatusPutRequest{
		ApiService: a,
		ctx: ctx,
		operationId: operationId,
		operationStatus: operationStatus,
	}
}

// Execute executes the request
//  @return interface{}
func (a *WorkerApiService) UpdateOperationApiV1OperationsOperationIdOperationStatusPutExecute(r ApiUpdateOperationApiV1OperationsOperationIdOperationStatusPutRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkerApiService.UpdateOperationApiV1OperationsOperationIdOperationStatusPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/operations/{operation_id}/{operation_status}"
	localVarPath = strings.Replace(localVarPath, "{"+"operation_id"+"}", url.PathEscape(parameterToString(r.operationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"operation_status"+"}", url.PathEscape(parameterToString(r.operationStatus, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
