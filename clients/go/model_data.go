/*
Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud_api_client

import (
	"encoding/json"
	"fmt"
)

// Data struct for Data
type Data struct {
	OperationActionUpdate *OperationActionUpdate
	OperationAssetUpdate *OperationAssetUpdate
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Data) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into OperationActionUpdate
	err = json.Unmarshal(data, &dst.OperationActionUpdate);
	if err == nil {
		jsonOperationActionUpdate, _ := json.Marshal(dst.OperationActionUpdate)
		if string(jsonOperationActionUpdate) == "{}" { // empty struct
			dst.OperationActionUpdate = nil
		} else {
			return nil // data stored in dst.OperationActionUpdate, return on the first match
		}
	} else {
		dst.OperationActionUpdate = nil
	}

	// try to unmarshal JSON data into OperationAssetUpdate
	err = json.Unmarshal(data, &dst.OperationAssetUpdate);
	if err == nil {
		jsonOperationAssetUpdate, _ := json.Marshal(dst.OperationAssetUpdate)
		if string(jsonOperationAssetUpdate) == "{}" { // empty struct
			dst.OperationAssetUpdate = nil
		} else {
			return nil // data stored in dst.OperationAssetUpdate, return on the first match
		}
	} else {
		dst.OperationAssetUpdate = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(Data)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *Data) MarshalJSON() ([]byte, error) {
	if src.OperationActionUpdate != nil {
		return json.Marshal(&src.OperationActionUpdate)
	}

	if src.OperationAssetUpdate != nil {
		return json.Marshal(&src.OperationAssetUpdate)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableData struct {
	value *Data
	isSet bool
}

func (v NullableData) Get() *Data {
	return v.value
}

func (v *NullableData) Set(val *Data) {
	v.value = val
	v.isSet = true
}

func (v NullableData) IsSet() bool {
	return v.isSet
}

func (v *NullableData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableData(val *Data) *NullableData {
	return &NullableData{value: val, isSet: true}
}

func (v NullableData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


