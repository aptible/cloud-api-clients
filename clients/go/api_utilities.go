/*
Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloud_api_client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


type UtilitiesApi interface {

	/*
	GetPingApiV1DebugPingGet Get Ping

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetPingApiV1DebugPingGetRequest
	*/
	GetPingApiV1DebugPingGet(ctx context.Context) ApiGetPingApiV1DebugPingGetRequest

	// GetPingApiV1DebugPingGetExecute executes the request
	//  @return TextResponse
	GetPingApiV1DebugPingGetExecute(r ApiGetPingApiV1DebugPingGetRequest) (*TextResponse, *http.Response, error)

	/*
	GetUserApiV1DebugUserAuthGet Get User

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetUserApiV1DebugUserAuthGetRequest
	*/
	GetUserApiV1DebugUserAuthGet(ctx context.Context) ApiGetUserApiV1DebugUserAuthGetRequest

	// GetUserApiV1DebugUserAuthGetExecute executes the request
	//  @return interface{}
	GetUserApiV1DebugUserAuthGetExecute(r ApiGetUserApiV1DebugUserAuthGetRequest) (interface{}, *http.Response, error)

	/*
	GetUserRoleApiV1DebugUserRoleMiddlewareCheckGet Get User Role

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetUserRoleApiV1DebugUserRoleMiddlewareCheckGetRequest
	*/
	GetUserRoleApiV1DebugUserRoleMiddlewareCheckGet(ctx context.Context) ApiGetUserRoleApiV1DebugUserRoleMiddlewareCheckGetRequest

	// GetUserRoleApiV1DebugUserRoleMiddlewareCheckGetExecute executes the request
	//  @return interface{}
	GetUserRoleApiV1DebugUserRoleMiddlewareCheckGetExecute(r ApiGetUserRoleApiV1DebugUserRoleMiddlewareCheckGetRequest) (interface{}, *http.Response, error)
}

// UtilitiesApiService UtilitiesApi service
type UtilitiesApiService service

type ApiGetPingApiV1DebugPingGetRequest struct {
	ctx context.Context
	ApiService UtilitiesApi
}

func (r ApiGetPingApiV1DebugPingGetRequest) Execute() (*TextResponse, *http.Response, error) {
	return r.ApiService.GetPingApiV1DebugPingGetExecute(r)
}

/*
GetPingApiV1DebugPingGet Get Ping

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPingApiV1DebugPingGetRequest
*/
func (a *UtilitiesApiService) GetPingApiV1DebugPingGet(ctx context.Context) ApiGetPingApiV1DebugPingGetRequest {
	return ApiGetPingApiV1DebugPingGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TextResponse
func (a *UtilitiesApiService) GetPingApiV1DebugPingGetExecute(r ApiGetPingApiV1DebugPingGetRequest) (*TextResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TextResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UtilitiesApiService.GetPingApiV1DebugPingGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/debug/ping"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserApiV1DebugUserAuthGetRequest struct {
	ctx context.Context
	ApiService UtilitiesApi
}

func (r ApiGetUserApiV1DebugUserAuthGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GetUserApiV1DebugUserAuthGetExecute(r)
}

/*
GetUserApiV1DebugUserAuthGet Get User

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetUserApiV1DebugUserAuthGetRequest
*/
func (a *UtilitiesApiService) GetUserApiV1DebugUserAuthGet(ctx context.Context) ApiGetUserApiV1DebugUserAuthGetRequest {
	return ApiGetUserApiV1DebugUserAuthGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *UtilitiesApiService) GetUserApiV1DebugUserAuthGetExecute(r ApiGetUserApiV1DebugUserAuthGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UtilitiesApiService.GetUserApiV1DebugUserAuthGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/debug/user_auth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserRoleApiV1DebugUserRoleMiddlewareCheckGetRequest struct {
	ctx context.Context
	ApiService UtilitiesApi
	organizationId *string
}

func (r ApiGetUserRoleApiV1DebugUserRoleMiddlewareCheckGetRequest) OrganizationId(organizationId string) ApiGetUserRoleApiV1DebugUserRoleMiddlewareCheckGetRequest {
	r.organizationId = &organizationId
	return r
}

func (r ApiGetUserRoleApiV1DebugUserRoleMiddlewareCheckGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GetUserRoleApiV1DebugUserRoleMiddlewareCheckGetExecute(r)
}

/*
GetUserRoleApiV1DebugUserRoleMiddlewareCheckGet Get User Role

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetUserRoleApiV1DebugUserRoleMiddlewareCheckGetRequest
*/
func (a *UtilitiesApiService) GetUserRoleApiV1DebugUserRoleMiddlewareCheckGet(ctx context.Context) ApiGetUserRoleApiV1DebugUserRoleMiddlewareCheckGetRequest {
	return ApiGetUserRoleApiV1DebugUserRoleMiddlewareCheckGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *UtilitiesApiService) GetUserRoleApiV1DebugUserRoleMiddlewareCheckGetExecute(r ApiGetUserRoleApiV1DebugUserRoleMiddlewareCheckGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UtilitiesApiService.GetUserRoleApiV1DebugUserRoleMiddlewareCheckGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/debug/user_role_middleware_check"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.organizationId == nil {
		return localVarReturnValue, nil, reportError("organizationId is required and must be specified")
	}

	localVarQueryParams.Add("organization_id", parameterToString(*r.organizationId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
