# coding: utf-8

"""
    Cloud API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cloud_api_client import schemas  # noqa: F401


class OrganizationOutput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "baa_status",
            "name",
            "contact_details",
            "id",
        }
        
        class properties:
            name = schemas.StrSchema
            baa_status = schemas.StrSchema
            contact_details = schemas.DictSchema
            id = schemas.UUIDSchema
            aws_ou = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "baa_status": baa_status,
                "contact_details": contact_details,
                "id": id,
                "aws_ou": aws_ou,
            }
    
    baa_status: MetaOapg.properties.baa_status
    name: MetaOapg.properties.name
    contact_details: MetaOapg.properties.contact_details
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baa_status"]) -> MetaOapg.properties.baa_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact_details"]) -> MetaOapg.properties.contact_details: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aws_ou"]) -> MetaOapg.properties.aws_ou: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "baa_status", "contact_details", "id", "aws_ou", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baa_status"]) -> MetaOapg.properties.baa_status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact_details"]) -> MetaOapg.properties.contact_details: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aws_ou"]) -> typing.Union[MetaOapg.properties.aws_ou, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "baa_status", "contact_details", "id", "aws_ou", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        baa_status: typing.Union[MetaOapg.properties.baa_status, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        contact_details: typing.Union[MetaOapg.properties.contact_details, dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        aws_ou: typing.Union[MetaOapg.properties.aws_ou, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrganizationOutput':
        return super().__new__(
            cls,
            *args,
            baa_status=baa_status,
            name=name,
            contact_details=contact_details,
            id=id,
            aws_ou=aws_ou,
            _configuration=_configuration,
            **kwargs,
        )
