# coding: utf-8

"""
    Cloud API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cloud_api_client import schemas  # noqa: F401


class HealthCheckFromWorker(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "execution_id",
            "environment_id",
            "message",
        }
        
        class properties:
            environment_id = schemas.UUIDSchema
            execution_id = schemas.UUIDSchema
            message = schemas.StrSchema
            message_id = schemas.UUIDSchema
            __annotations__ = {
                "environment_id": environment_id,
                "execution_id": execution_id,
                "message": message,
                "message_id": message_id,
            }
    
    execution_id: MetaOapg.properties.execution_id
    environment_id: MetaOapg.properties.environment_id
    message: MetaOapg.properties.message
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment_id"]) -> MetaOapg.properties.environment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["execution_id"]) -> MetaOapg.properties.execution_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message_id"]) -> MetaOapg.properties.message_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["environment_id", "execution_id", "message", "message_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment_id"]) -> MetaOapg.properties.environment_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["execution_id"]) -> MetaOapg.properties.execution_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message_id"]) -> typing.Union[MetaOapg.properties.message_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["environment_id", "execution_id", "message", "message_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        execution_id: typing.Union[MetaOapg.properties.execution_id, str, uuid.UUID, ],
        environment_id: typing.Union[MetaOapg.properties.environment_id, str, uuid.UUID, ],
        message: typing.Union[MetaOapg.properties.message, str, ],
        message_id: typing.Union[MetaOapg.properties.message_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HealthCheckFromWorker':
        return super().__new__(
            cls,
            *args,
            execution_id=execution_id,
            environment_id=environment_id,
            message=message,
            message_id=message_id,
            _configuration=_configuration,
            **kwargs,
        )
