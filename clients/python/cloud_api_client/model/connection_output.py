# coding: utf-8

"""
    Cloud API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cloud_api_client import schemas  # noqa: F401


class ConnectionOutput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "id",
            "status",
        }
        
        class properties:
            id = schemas.UUIDSchema
        
            @staticmethod
            def status() -> typing.Type['ConnectionStatus']:
                return ConnectionStatus
        
            @staticmethod
            def incoming_connection_asset() -> typing.Type['AssetOutput']:
                return AssetOutput
            
            
            class operations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['OperationOutput']:
                        return OperationOutput
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['OperationOutput'], typing.List['OperationOutput']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'operations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'OperationOutput':
                    return super().__getitem__(i)
        
            @staticmethod
            def outgoing_connection_asset() -> typing.Type['AssetOutput']:
                return AssetOutput
            __annotations__ = {
                "id": id,
                "status": status,
                "incoming_connection_asset": incoming_connection_asset,
                "operations": operations,
                "outgoing_connection_asset": outgoing_connection_asset,
            }
    
    id: MetaOapg.properties.id
    status: 'ConnectionStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'ConnectionStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incoming_connection_asset"]) -> 'AssetOutput': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operations"]) -> MetaOapg.properties.operations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outgoing_connection_asset"]) -> 'AssetOutput': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "status", "incoming_connection_asset", "operations", "outgoing_connection_asset", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'ConnectionStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incoming_connection_asset"]) -> typing.Union['AssetOutput', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operations"]) -> typing.Union[MetaOapg.properties.operations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outgoing_connection_asset"]) -> typing.Union['AssetOutput', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "status", "incoming_connection_asset", "operations", "outgoing_connection_asset", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        status: 'ConnectionStatus',
        incoming_connection_asset: typing.Union['AssetOutput', schemas.Unset] = schemas.unset,
        operations: typing.Union[MetaOapg.properties.operations, list, tuple, schemas.Unset] = schemas.unset,
        outgoing_connection_asset: typing.Union['AssetOutput', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConnectionOutput':
        return super().__new__(
            cls,
            *args,
            id=id,
            status=status,
            incoming_connection_asset=incoming_connection_asset,
            operations=operations,
            outgoing_connection_asset=outgoing_connection_asset,
            _configuration=_configuration,
            **kwargs,
        )

from cloud_api_client.model.asset_output import AssetOutput
from cloud_api_client.model.connection_status import ConnectionStatus
from cloud_api_client.model.operation_output import OperationOutput
