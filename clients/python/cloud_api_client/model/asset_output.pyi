# coding: utf-8

"""
    Cloud API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cloud_api_client import schemas  # noqa: F401


class AssetOutput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "environment",
            "user_defined",
            "asset_version",
            "id",
            "asset",
            "current_asset_parameters",
            "status",
        }
        
        class properties:
            asset = schemas.StrSchema
            asset_version = schemas.StrSchema
            id = schemas.UUIDSchema
        
            @staticmethod
            def current_asset_parameters() -> typing.Type['AssetParametersOutput']:
                return AssetParametersOutput
        
            @staticmethod
            def environment() -> typing.Type['EnvironmentOutput']:
                return EnvironmentOutput
        
            @staticmethod
            def status() -> typing.Type['AssetStatus']:
                return AssetStatus
            user_defined = schemas.BoolSchema
            
            
            class connections(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ConnectionOutput']:
                        return ConnectionOutput
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ConnectionOutput'], typing.List['ConnectionOutput']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'connections':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ConnectionOutput':
                    return super().__getitem__(i)
            
            
            class outputs(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['AssetTerraformOutput']:
                        return AssetTerraformOutput
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'AssetTerraformOutput':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'AssetTerraformOutput':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'AssetTerraformOutput',
                ) -> 'outputs':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "asset": asset,
                "asset_version": asset_version,
                "id": id,
                "current_asset_parameters": current_asset_parameters,
                "environment": environment,
                "status": status,
                "user_defined": user_defined,
                "connections": connections,
                "outputs": outputs,
            }
    
    environment: 'EnvironmentOutput'
    user_defined: MetaOapg.properties.user_defined
    asset_version: MetaOapg.properties.asset_version
    id: MetaOapg.properties.id
    asset: MetaOapg.properties.asset
    current_asset_parameters: 'AssetParametersOutput'
    status: 'AssetStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asset"]) -> MetaOapg.properties.asset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asset_version"]) -> MetaOapg.properties.asset_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_asset_parameters"]) -> 'AssetParametersOutput': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment"]) -> 'EnvironmentOutput': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'AssetStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_defined"]) -> MetaOapg.properties.user_defined: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connections"]) -> MetaOapg.properties.connections: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outputs"]) -> MetaOapg.properties.outputs: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["asset", "asset_version", "id", "current_asset_parameters", "environment", "status", "user_defined", "connections", "outputs", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asset"]) -> MetaOapg.properties.asset: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asset_version"]) -> MetaOapg.properties.asset_version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_asset_parameters"]) -> 'AssetParametersOutput': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment"]) -> 'EnvironmentOutput': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'AssetStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_defined"]) -> MetaOapg.properties.user_defined: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connections"]) -> typing.Union[MetaOapg.properties.connections, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outputs"]) -> typing.Union[MetaOapg.properties.outputs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["asset", "asset_version", "id", "current_asset_parameters", "environment", "status", "user_defined", "connections", "outputs", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        environment: 'EnvironmentOutput',
        user_defined: typing.Union[MetaOapg.properties.user_defined, bool, ],
        asset_version: typing.Union[MetaOapg.properties.asset_version, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        asset: typing.Union[MetaOapg.properties.asset, str, ],
        current_asset_parameters: 'AssetParametersOutput',
        status: 'AssetStatus',
        connections: typing.Union[MetaOapg.properties.connections, list, tuple, schemas.Unset] = schemas.unset,
        outputs: typing.Union[MetaOapg.properties.outputs, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AssetOutput':
        return super().__new__(
            cls,
            *args,
            environment=environment,
            user_defined=user_defined,
            asset_version=asset_version,
            id=id,
            asset=asset,
            current_asset_parameters=current_asset_parameters,
            status=status,
            connections=connections,
            outputs=outputs,
            _configuration=_configuration,
            **kwargs,
        )

from cloud_api_client.model.asset_parameters_output import AssetParametersOutput
from cloud_api_client.model.asset_status import AssetStatus
from cloud_api_client.model.asset_terraform_output import AssetTerraformOutput
from cloud_api_client.model.connection_output import ConnectionOutput
from cloud_api_client.model.environment_output import EnvironmentOutput
