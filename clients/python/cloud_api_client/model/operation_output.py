# coding: utf-8

"""
    Cloud API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cloud_api_client import schemas  # noqa: F401


class OperationOutput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "asset_name",
            "environment_id",
            "user_id",
            "asset_version",
            "organization_id",
            "asset_id",
            "id",
        }
        
        class properties:
            environment_id = schemas.UUIDSchema
            user_id = schemas.UUIDSchema
            organization_id = schemas.UUIDSchema
            asset_name = schemas.StrSchema
            asset_id = schemas.UUIDSchema
            asset_version = schemas.StrSchema
            id = schemas.UUIDSchema
            
            
            class operation_type(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            OperationType,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'operation_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class status(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            OperationStatus,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            asset_parameters = schemas.DictSchema
            execution_id = schemas.UUIDSchema
            __annotations__ = {
                "environment_id": environment_id,
                "user_id": user_id,
                "organization_id": organization_id,
                "asset_name": asset_name,
                "asset_id": asset_id,
                "asset_version": asset_version,
                "id": id,
                "operation_type": operation_type,
                "status": status,
                "asset_parameters": asset_parameters,
                "execution_id": execution_id,
            }
    
    asset_name: MetaOapg.properties.asset_name
    environment_id: MetaOapg.properties.environment_id
    user_id: MetaOapg.properties.user_id
    asset_version: MetaOapg.properties.asset_version
    organization_id: MetaOapg.properties.organization_id
    asset_id: MetaOapg.properties.asset_id
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment_id"]) -> MetaOapg.properties.environment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization_id"]) -> MetaOapg.properties.organization_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asset_name"]) -> MetaOapg.properties.asset_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asset_id"]) -> MetaOapg.properties.asset_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asset_version"]) -> MetaOapg.properties.asset_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operation_type"]) -> MetaOapg.properties.operation_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asset_parameters"]) -> MetaOapg.properties.asset_parameters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["execution_id"]) -> MetaOapg.properties.execution_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["environment_id", "user_id", "organization_id", "asset_name", "asset_id", "asset_version", "id", "operation_type", "status", "asset_parameters", "execution_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment_id"]) -> MetaOapg.properties.environment_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization_id"]) -> MetaOapg.properties.organization_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asset_name"]) -> MetaOapg.properties.asset_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asset_id"]) -> MetaOapg.properties.asset_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asset_version"]) -> MetaOapg.properties.asset_version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operation_type"]) -> typing.Union[MetaOapg.properties.operation_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asset_parameters"]) -> typing.Union[MetaOapg.properties.asset_parameters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["execution_id"]) -> typing.Union[MetaOapg.properties.execution_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["environment_id", "user_id", "organization_id", "asset_name", "asset_id", "asset_version", "id", "operation_type", "status", "asset_parameters", "execution_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        asset_name: typing.Union[MetaOapg.properties.asset_name, str, ],
        environment_id: typing.Union[MetaOapg.properties.environment_id, str, uuid.UUID, ],
        user_id: typing.Union[MetaOapg.properties.user_id, str, uuid.UUID, ],
        asset_version: typing.Union[MetaOapg.properties.asset_version, str, ],
        organization_id: typing.Union[MetaOapg.properties.organization_id, str, uuid.UUID, ],
        asset_id: typing.Union[MetaOapg.properties.asset_id, str, uuid.UUID, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        operation_type: typing.Union[MetaOapg.properties.operation_type, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        asset_parameters: typing.Union[MetaOapg.properties.asset_parameters, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        execution_id: typing.Union[MetaOapg.properties.execution_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OperationOutput':
        return super().__new__(
            cls,
            *args,
            asset_name=asset_name,
            environment_id=environment_id,
            user_id=user_id,
            asset_version=asset_version,
            organization_id=organization_id,
            asset_id=asset_id,
            id=id,
            operation_type=operation_type,
            status=status,
            asset_parameters=asset_parameters,
            execution_id=execution_id,
            _configuration=_configuration,
            **kwargs,
        )

from cloud_api_client.model.operation_status import OperationStatus
from cloud_api_client.model.operation_type import OperationType
