# coding: utf-8

"""
    Cloud API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cloud_api_client import schemas  # noqa: F401


class OperationAssetUpdate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "terraform_init",
        }
        
        class properties:
        
            @staticmethod
            def terraform_init() -> typing.Type['OperationTerraformRunUpdate']:
                return OperationTerraformRunUpdate
        
            @staticmethod
            def terraform_plan() -> typing.Type['OperationTerraformRunUpdate']:
                return OperationTerraformRunUpdate
        
            @staticmethod
            def terraform_apply() -> typing.Type['OperationTerraformRunUpdate']:
                return OperationTerraformRunUpdate
            terraform_plan_failures = schemas.StrSchema
            terraform_apply_failures = schemas.StrSchema
            __annotations__ = {
                "terraform_init": terraform_init,
                "terraform_plan": terraform_plan,
                "terraform_apply": terraform_apply,
                "terraform_plan_failures": terraform_plan_failures,
                "terraform_apply_failures": terraform_apply_failures,
            }
    
    terraform_init: 'OperationTerraformRunUpdate'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terraform_init"]) -> 'OperationTerraformRunUpdate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terraform_plan"]) -> 'OperationTerraformRunUpdate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terraform_apply"]) -> 'OperationTerraformRunUpdate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terraform_plan_failures"]) -> MetaOapg.properties.terraform_plan_failures: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terraform_apply_failures"]) -> MetaOapg.properties.terraform_apply_failures: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["terraform_init", "terraform_plan", "terraform_apply", "terraform_plan_failures", "terraform_apply_failures", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terraform_init"]) -> 'OperationTerraformRunUpdate': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terraform_plan"]) -> typing.Union['OperationTerraformRunUpdate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terraform_apply"]) -> typing.Union['OperationTerraformRunUpdate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terraform_plan_failures"]) -> typing.Union[MetaOapg.properties.terraform_plan_failures, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terraform_apply_failures"]) -> typing.Union[MetaOapg.properties.terraform_apply_failures, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["terraform_init", "terraform_plan", "terraform_apply", "terraform_plan_failures", "terraform_apply_failures", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        terraform_init: 'OperationTerraformRunUpdate',
        terraform_plan: typing.Union['OperationTerraformRunUpdate', schemas.Unset] = schemas.unset,
        terraform_apply: typing.Union['OperationTerraformRunUpdate', schemas.Unset] = schemas.unset,
        terraform_plan_failures: typing.Union[MetaOapg.properties.terraform_plan_failures, str, schemas.Unset] = schemas.unset,
        terraform_apply_failures: typing.Union[MetaOapg.properties.terraform_apply_failures, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OperationAssetUpdate':
        return super().__new__(
            cls,
            *args,
            terraform_init=terraform_init,
            terraform_plan=terraform_plan,
            terraform_apply=terraform_apply,
            terraform_plan_failures=terraform_plan_failures,
            terraform_apply_failures=terraform_apply_failures,
            _configuration=_configuration,
            **kwargs,
        )

from cloud_api_client.model.operation_terraform_run_update import OperationTerraformRunUpdate
