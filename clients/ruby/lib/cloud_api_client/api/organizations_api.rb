=begin
#Cloud API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module CloudApiClient
  class OrganizationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Organization Delete
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def organization_delete(organization_id, opts = {})
      data, _status_code, _headers = organization_delete_with_http_info(organization_id, opts)
      data
    end

    # Organization Delete
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def organization_delete_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.organization_delete ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.organization_delete"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{organization_id}'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.organization_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organization_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Organization Get
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationOutput]
    def organization_get(organization_id, opts = {})
      data, _status_code, _headers = organization_get_with_http_info(organization_id, opts)
      data
    end

    # Organization Get
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationOutput, Integer, Hash)>] OrganizationOutput data, response status code and response headers
    def organization_get_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.organization_get ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.organization_get"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{organization_id}'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.organization_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organization_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Organization Get Environments
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<EnvironmentOutput>]
    def organization_get_environments(organization_id, opts = {})
      data, _status_code, _headers = organization_get_environments_with_http_info(organization_id, opts)
      data
    end

    # Organization Get Environments
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<EnvironmentOutput>, Integer, Hash)>] Array<EnvironmentOutput> data, response status code and response headers
    def organization_get_environments_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.organization_get_environments ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.organization_get_environments"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{organization_id}/environments'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<EnvironmentOutput>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.organization_get_environments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organization_get_environments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Organization Get Operations
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :asset_id 
    # @option opts [String] :environment_id 
    # @return [Array<OperationOutput>]
    def organization_get_operations(organization_id, opts = {})
      data, _status_code, _headers = organization_get_operations_with_http_info(organization_id, opts)
      data
    end

    # Organization Get Operations
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :asset_id 
    # @option opts [String] :environment_id 
    # @return [Array<(Array<OperationOutput>, Integer, Hash)>] Array<OperationOutput> data, response status code and response headers
    def organization_get_operations_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.organization_get_operations ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.organization_get_operations"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{organization_id}/operations/'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'asset_id'] = opts[:'asset_id'] if !opts[:'asset_id'].nil?
      query_params[:'environment_id'] = opts[:'environment_id'] if !opts[:'environment_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OperationOutput>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.organization_get_operations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organization_get_operations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Organization List
    # @param [Hash] opts the optional parameters
    # @return [Array<OrganizationOutput>]
    def organization_list(opts = {})
      data, _status_code, _headers = organization_list_with_http_info(opts)
      data
    end

    # Organization List
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrganizationOutput>, Integer, Hash)>] Array<OrganizationOutput> data, response status code and response headers
    def organization_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.organization_list ...'
      end
      # resource path
      local_var_path = '/api/v1/organizations/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<OrganizationOutput>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.organization_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organization_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Organization Update
    # @param organization_id [String] 
    # @param organization_input [OrganizationInput] 
    # @param [Hash] opts the optional parameters
    # @return [OrganizationOutput]
    def organization_update(organization_id, organization_input, opts = {})
      data, _status_code, _headers = organization_update_with_http_info(organization_id, organization_input, opts)
      data
    end

    # Organization Update
    # @param organization_id [String] 
    # @param organization_input [OrganizationInput] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationOutput, Integer, Hash)>] OrganizationOutput data, response status code and response headers
    def organization_update_with_http_info(organization_id, organization_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.organization_update ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.organization_update"
      end
      # verify the required parameter 'organization_input' is set
      if @api_client.config.client_side_validation && organization_input.nil?
        fail ArgumentError, "Missing the required parameter 'organization_input' when calling OrganizationsApi.organization_update"
      end
      # resource path
      local_var_path = '/api/v1/organizations/{organization_id}'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(organization_input)

      # return_type
      return_type = opts[:debug_return_type] || 'OrganizationOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['HTTPBearer']

      new_options = opts.merge(
        :operation => :"OrganizationsApi.organization_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#organization_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
